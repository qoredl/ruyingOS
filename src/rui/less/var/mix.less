@charset "utf-8";
@import "var";
//提供基础的混合类
//author:ruying(如影)
//date:2016-9-3
//e-mail:qoredl@163.com
//site:www.ok111.net
//update：2016-9-3

//设定文本输入框占位符的颜色。
.placeholder(@color: @input-color-placeholder) {
  // Firefox
  &::-moz-placeholder {
    color: @color;
    opacity: 1;
  }

  // Safari and Chrome
  &::-webkit-input-placeholder {
    color: @color;
  }
}

//处理选区的方式。可用取值有 text / none。
//user-select 目前没有出现在任何 W3C 官方的规范中，浏览器厂商的实现可能会有细节上的差异，目前不建议使用除 text 和 none 以外的任何值。
.user-select(@select) {
  -webkit-user-select: @select;
  -moz-user-select: @select;
  user-select: @select;
}

//建立 BFC 清除元素内部的浮动，使元素获得应有的高度。
.clearfix() {
  &:before,
  &:after {
    display: table;
    clear: both;
    content: " ";
  }
}

// Center-align a block level element
.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Resize anything
.resizable(@direction) {
  resize: @direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// Scrollable
.scrollable() {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  overflow-scrolling: touch;
}


// Text overflow
// Requires inline-block or block for proper styling
.ellipsis(@display: block) {
  display: @display;
  word-wrap: normal; /* for IE */
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.img-responsive(@display: block) {
  display: @display;
  max-width: 100%;
  height: auto;
}

// WebKit-style focus
.tab-focus() {
  // Default
  /*outline: thin dotted;*/
  // WebKit
  //outline: 1px auto -webkit-focus-ring-color;
  //outline-offset: -2px;
  outline:none;
}

//绝对定位垂直居中
.absolute-middile-v(){
  position: absolute;
  top: 50%;
  -webkit-transform: translate(0,-50%);
  transform: translate(0,-50%);
}

.gradient-striped(@color: rgba(255,255,255,.15); @angle: 45deg) {
  background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
}

// Caret - right
// -----------------------------------------------------------------------------
.caret-right(@size:6px; @color:#222) {
  display: inline-block;
  width: 0;
  height: 0;
  vertical-align: middle;
  border: @color solid @size;
  border-bottom-color: transparent;
  border-right-color: transparent;
}

// CSS Arrow Mixin
// -----------------------------------------------------------------------------
//
// @param:  45deg (default) - right
//          135deg - down
//          -45deg - up
//          -135deg -left
// ------------------------------------------------------------------------
.arrow(@color:#DDD; @width:6px; @border-width: 2px; @deg: 45deg) {
  display: inline-block;
  width: @width;
  height: @width;
  border: @color solid;
  border-width: @border-width @border-width 0 0;
  -webkit-transform: rotate(@deg);
  transform: rotate(@deg);
}

// Button variants
// =============================================================================

.button-variant(@color; @background; @border) {
  color: @color;
  background-color: @background;
  border-color: @border;

  /*a&:visited {
    color: @color;
  }*/

  &:hover,
  /*&:focus,*/
  &:active,
  &.on/*,
  .on &.@{ns}dropdown-toggle */{
    color: @color;
    border-color: darken(@border, 12%);
  }

  &:hover/*,
  &:focus */{
    background-color: darken(@background, 7%);
  }

  /*&:active,
  &.on,
  .on &.@{ns}dropdown-toggle {
    /*background-image: none;
    background-color: darken(@background, 14%);

  }*/

  &.@{ns}disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    /*&:focus,*/
    &:active,
    &.on {
      background-color: @background;
      border-color: @border;
    }
  }

  // for `.@{ns}btn-group`
  /*.@{ns}btn-group &,
  .@{ns}btn-group-stacked & {
    border-color: darken(@background, 5%);
  }*/
}

// Form element focus state
// -----------------------------------------------------------------------------
.form-field-focus(@color: @input-border-focus) {
  @color-rgba: rgba(red(@color), green(@color), blue(@color), .3);
  &:focus {
    //background-color: rgba(red(@color), green(@color), blue(@color), .05);
    background-color: @input-focus-bg;
    border-color: @color;
    box-shadow: ~"inset 0 1px 1px rgba(0,0,0,.075), 0 0 5px @{color-rgba}";
  }
}

// Flexbox
// =============================================================================
// Flexbox displayType
//flex | inline-flex
.flexbox(@display: flex) {
  display: ~"-webkit-@{display}";
  display: @display;
}

// Flex Direction and Wrap
// The shorthand for `flex-direction` and `flex-wrap`
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
.flex-flow(@flow: ~"row nowrap") {
  -webkit-flex-flow: @flow;
  flex-flow: @flow;
}

// Axis Alignment
// - applies to: flex containers
//flex-start | flex-end | center | space-between | space-around
.justify-content(@justify: flex-start) {
  -webkit-justify-content: @justify;
  justify-content: @justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
//flex-start | flex-end | center | space-between | space-around | stretch
.align-content(@align: stretch) {
  -webkit-align-content: @align;
  align-content: @align;
}

// Cross-axis Alignment
// - applies to: flex containers
//flex-start | flex-end | center | baseline | stretch
.align-items(@align: stretch) {
  -webkit-align-items: @align;
  align-items: @align;
}

// Display Order
// - applies to: flex items
// <integer>
.flex-order(@order: 0) {
  -webkit-order: @order;
  order: @order;
}

// The 'flex' shorthand
// This shorthand for `flex-grow`, `flex-shrink` and `flex-basis` combined.
// The second and third parameters (flex-shrink and flex-basis) are optional.
//Default is 0 1 auto.
//- applies to: flex items
//<positive-number>, initial, auto, or none
.flex(@value: ~"1 1 0%") {
  -webkit-flex: @value;
  flex: @value;
}

// Cross-axis Alignment
// - applies to: flex items
//auto | flex-start | flex-end | center | baseline | stretch
.align-self(@align: auto) {
  -webkit-align-self: @align;
  align-self: @align;
}

// Animations
// -----------------------------------------------------------------------------
.animation(@animation) {
  -webkit-animation: @animation;
  animation: @animation;
}
.animation-name(@name) {
  -webkit-animation-name: @name;
  animation-name: @name;
}

.animation-duration(@duration) {
  -webkit-animation-duration: @duration;
  animation-duration: @duration;
}

.animation-timing-function(@timing-function) {
  -webkit-animation-timing-function: @timing-function;
  animation-timing-function: @timing-function;
}

.animation-delay(@delay) {
  -webkit-animation-delay: @delay;
  animation-delay: @delay;
}

.animation-iteration-count(@iteration-count) {
  -webkit-animation-iteration-count: @iteration-count;
  animation-iteration-count: @iteration-count;
}

.animation-direction(@direction) {
  -webkit-animation-direction: @direction;
  animation-direction: @direction;
}

.animation-fill-mode(@fill-mode) {
  -webkit-animation-fill-mode: @fill-mode;
  animation-fill-mode: @fill-mode;
}


// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`
// -----------------------------------------------------------------------------
.backface-visibility(@visibility) {
  -webkit-backface-visibility: @visibility;
  -moz-backface-visibility: @visibility;
  backface-visibility: @visibility;
}